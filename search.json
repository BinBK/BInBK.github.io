[{"title":"正则表达式","url":"/2022/03/05/正则表达式/","content":"\n# 正则表达式\n\n## 简介\n\n> ​\t正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为**regex**、**regexp**或**RE**），计算机科学的一个概念。正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。\n> ​\t正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式是一种文本模式，该模式描述在搜索文本时要匹配的一个或多个字符串。\n\n## 常用元字符\n<!--more-->\n| 字符    | 描述                                                         |\n| ------- | ------------------------------------------------------------ |\n| \\       | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，'n' 匹配字符 \"n\"。'\\n' 匹配一个换行符。序列 '\\\\' 匹配 \"\\\" 而 \"\\(\" 则匹配 \"(\"。 |\n| ^       | 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。 |\n| $       | 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\\n' 或 '\\r' 之前的位置。 |\n| *       | 匹配前面的子表达式零次或多次。例如，zo* 能匹配 \"z\" 以及 \"zoo\"。* 等价于{0,}。 |\n| +       | 匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 \"zo\" 以及 \"zoo\"，但不能匹配 \"z\"。+ 等价于 {1,}。 |\n| ?       | 匹配前面的子表达式零次或一次。例如，\"do(es)?\" 可以匹配 \"do\" 或 \"does\" 。? 等价于 {0,1}。 |\n| .       | 匹配除换行符以外的任意字符                                   |\n| \\w      | 匹配字母或数字或下划线                                       |\n| \\s      | 匹配任意的空白符                                             |\n| \\d      | 匹配数字                                                     |\n| \\W      | 匹配非字母或数字或下划线                                     |\n| \\D      | 匹配非数字                                                   |\n| \\S      | 匹配非空白符                                                 |\n| [...]   | 匹配字符组中的字符                                           |\n| [^...]  | 匹配除了字符组中字符的所有字符                               |\n| .*      | 贪婪匹配                                                     |\n| **.*?** | 惰性匹配                                                     |\n\n## 作用\n\n使用正则表达式在字符串中搜索需要的字符。判断字符串是否正则表达式的过滤逻辑（称作“匹配”），从而获取我们需要的部分。\n\n正则表达式的特点是灵活性、逻辑性和功能性强大，可以迅速、极简单的方式达到字符串的复杂控制。可用于搜索、python爬虫筛选需要的数据。\n\n[点击测试正则表达式](https://c.runoob.com/front-end/854/) \n\n","tags":["正则表达式"],"categories":["Github"]},{"title":"Vuex","url":"/2022/02/07/Vuex/","content":"## 什么是Vuex？\n\n> Vuex 是一个专为 Vue.js 应用程序开发的**状态管理模式 + 库**。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n## 安装\n\n```\nnpm install vuex --save\n//使用\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n```\n<!--more-->\n\n### promise\n\nVuex 依赖Promise。如果你支持的浏览器并没有实现 Promise (比如 IE)，那么你可以使用一个 polyfill 的库，例如es6-promise。在vue3x中\n\n```\n//安装\nnpm install es6-promise --save \n//需要添加在使用Vuex之前\nimport 'es6-promise/auto'\n```\n\n## 核心概率\n\nVuex 的核心由五部分组成：State、Getter、Mutation、Action 和 Module，简单的 Vuex，也至少会由 State 和 Mutation 构成。\n\n### state\n\n### mapState辅助函数\n\n当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 `mapState` 辅助函数帮助我们生成计算属性\n\n### Getter\n\n有时候，我们会发现 State 中的数据，并不是我们直接想要的，而是需要经过相应的处理后，才能满足我们的需求，这时我们可以使用Getter\n\n### Mutation\n\n更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 **事件类型 (type)** 和 一个 **回调函数 (handler)**。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数\n\n### Action\n\nAction 类似于 mutation，不同在于：\n\n- Action 提交的是 mutation，而不是直接变更状态。\n- Action 可以包含任意**异步**操作。\n\n### Module\n\n这个是项目比较复杂时使用，一般很多使用\n\n由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。\n\n为了解决以上问题，Vuex 允许我们将 store 分割成**模块（module）**。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割","tags":["Vuex"],"categories":["Vuex"]},{"title":"Element Plus","url":"/2022/02/06/Element-Plus/","content":"> 基于 Vue 3，面向设计师和开发者的组件库。\n>\n> element终于发布新版本了，这让我们使用Vue3的时候更方便，以下是两个element对于vue的使用方法\n\n## 一、Element UI\n\n[Element UI官网](https://element.eleme.io/#/zh-CN) \n\n如果是Vue 2.x搭建的项目，使用elementUI如下\n\n```\nvue add element\n```\n<!--more-->\n完整引入，在main.js下写\n\n```js\nimport Vue from 'vue';\nimport ElementUI from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\nimport App from './App.vue';\n\nVue.use(ElementUI);\n\nnew Vue({\n  el: '#app',\n  render: h => h(App)\n});\n```\n\n之后在组件里寻找需要的功能\n\n## 二、Element Plus\n\n[Element Plus官网](https://element-plus.gitee.io/zh-CN/)\n\n如果是Vue3.x使用这个，在搭建好的项目了，下载\n\n```\n npm install element-plus --save\n```\n\n### 使用\n\n在main.js中写\n\n```js\nimport { createApp } from 'vue'\nimport ElementPlus from 'element-plus'\nimport 'element-plus/dist/index.css'\nimport App from './App.vue'\n\nconst app = createApp(App)\n\napp.use(ElementPlus)\napp.mount('#app')\n```\n\n\n\n","tags":["Vue","Element"],"categories":["Vue","Element"]},{"title":"TCP/IP协议","url":"/2022/01/26/让div水平垂直居中11/","content":"\n# TCP/IP协议\n\n## 什么是TCP/IP协议\n\n> TCP/IP传输协议，即传输控制/网络协议，也叫作网络通讯协议。它是在网络的使用中的最基本的通信协议。TCP/IP传输协议对互联网中各部分进行通信的标准和方法进行了规定。\n>\n> 在世界上各地，各种各样的电脑运行着各自不同的操作系统为大家服务，这些电脑在表达同一种信息的时候所使用的方法是千差万别。计算机使用者意识到，只有把它们联合起来，电脑才会发挥出它最大的潜力。于是人们就想方设法的用电线把电脑连接到了一起。\n>\n> 但是简单的连到一起是远远不够的，就好像语言不同的两个人互相见了面，完全不能交流信息。因而他们需要定义一些共通的东西来进行交流，TCP/IP就是为此而生。TCP/IP不是一个协议，而是一个协议族的统称。里面包括了IP协议，IMCP协议，TCP协议，以及我们更加熟悉的http、ftp、pop3协议等等。电脑有了这些，就好像学会了外语一样，就可以和其他的计算机终端做自由的交流了\n<!--more-->\n## IP\n\nIP 用于计算机之间的通信。IP 是无连接的通信协议。它不会占用两个正在通信的计算机之间的通信线路。这样，IP 就降低了对网络线路的需求。每条线可以同时满足许多不同的计算机之间的通信需要。\n\n通过 IP，消息（或者其他数据）被分割为小的独立的包，并通过因特网在计算机之间传送。IP 负责将每个包路由至它的目的地。\n\n当一个 IP 包从一台计算机被发送，它会到达一个 IP 路由器。\n\nIP 路由器负责将这个包路由至它的目的地，直接地或者通过其他的路由器。\n\n在一个相同的通信中，一个包所经由的路径可能会和其他的包不同。而路由器负责根据通信量、网络中的错误或者其他参数来进行正确地寻址。\n\n每个计算机必须有一个 IP 地址才能够连入因特网。每个 IP 包必须有一个地址才能够发送到另一台计算机。网络上每一个节点都必须有一个独立的Internet地址（也叫做IP地址）。\n\n## TCP\n\nTCP 用于应用程序之间的通信。\n\n当应用程序希望通过 TCP 与另一个应用程序通信时，它会发送一个通信请求。这个请求必须被送到一个确切的地址。在双方“握手”之后，TCP 将在两个应用程序之间建立一个全双工 (full-duplex) 的通信。\n\n这个全双工的通信将占用两个计算机之间的通信线路，直到它被一方或双方关闭为止。\n\nUDP 和 TCP 很相似，但是更简单，同时可靠性低于 TCP。\n\n### TCP三次握手\n\n所谓三次握手（Three-Way Handshake）即建立TCP连接，就是指建立一个TCP连接时，需要客户端和服务端总共发送3个包以确认连接的建立。在socket编程中，这一过程由客户端执行connect来触发。\n\n### TCP四次挥手\n\n所谓四次挥手（Four-Way Wavehand）即终止TCP连接，就是指断开一个TCP连接时，需要客户端和服务端总共发送4个包以确认连接的断开。在socket编程中，这一过程由客户端或服务端任一方执行close来触发，\n\n\n\n## TCP/IP\n\nTCP/IP 意味着 TCP 和 IP 在一起协同工作。\n\nTCP 负责应用软件（比如你的浏览器）和网络软件之间的通信。\n\nIP 负责计算机之间的通信。\n\nTCP 负责将数据分割并装入 IP 包，然后在它们到达的时候重新组合它们。\n\nIP 负责将包发送至接受者。\n\n### TCP/IP协议分层\n\nTCP/IP协议族按照层次由上到下，层层包装。\n\n可搜索OSI 七层模型和TCP/IP四层模型更能直观了解\n\n**应用层**:\n 向用户提供一组常用的应用程序，比如电子邮件、文件传输访问、远程登录等。远程登录TELNET使用TELNET协议提供在网络其它主机上注册的接口。TELNET会话提供了基于字符的虚拟终端。文件传输访问FTP使用FTP协议来提供网络内机器间的文件拷贝功能。\n\n**传输层**:\n 提供应用程序间的通信。其功能包括：一、格式化信息流；二、提供可靠传输。为实现后者，传输层协议规定接收端必须发回确认，并且假如分组丢失，必须重新发送。\n\n**网络层** ：\n 负责相邻计算机之间的通信。其功能包括三方面。\n 一、处理来自传输层的分组发送请求，收到请求后，将分组装入IP数据报，填充报头，选择去往信宿机的路径，然后将数据报发往适当的网络接口。\n\n二、处理输入数据报：首先检查其合法性，然后进行寻径--假如该数据报已到达信宿机，则去掉报头，将剩下部分交给适当的传输协议；假如该数据报尚未到达信宿，则转发该数据报。\n\n三、处理路径、流控、拥塞等问题。\n\n**网络接口层**：\n 这是TCP/IP软件的最低层，负责接收IP数据报并通过网络发送之，或者从网络上接收物理帧，抽出IP数据报，交给IP层。","tags":["TCP/IP协议"],"categories":["TCP/IP协议"]},{"title":"Git","url":"/2022/01/25/Git/","content":"## 一、Git文件的三种状态和工作模式\n\n### 1.状态\n\n使用Git操作文件时，文件的三种状态\n\n|       状态        |                             描述                             |\n| :---------------: | :----------------------------------------------------------: |\n| 已提交(committed) |             表示数据已经安全的保存在本地数据库中             |\n| 已修改(modified)  |            表示修改了文件，但还没有保存到数据库中            |\n|  已暂存(staged)   | 表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中 |\n<!--more-->\n### 2.工作模式\n\nGit项目的三个工作区域\n\n|  分类   |                             描述                             |\n| :-----: | :----------------------------------------------------------: |\n| 工作区  |                      自己本地创建的项目                      |\n| 暂存区  | Git版本库里存着很多东西，其中最重要的是称为stage(或者叫index)的暂存区，还有Git自动创建的第一个分支master，以及指向master的一个指针叫HEAD |\n| Git仓库 |  工作区有一个隐藏目录.git,这个不算是工作区，而是Git的版本库  |\n\n基本的Git工作流程如下：\n\n- 在工作区中修改文件\n- 对修改的文件进行快照，然后添加到暂存区\n- 提交更新，将保存在暂存区域的文件快照永久转储到Git仓库中 \n\n## 二、创建版本库并提交文件\n\n```c\ngit init 初始化本地仓库\ngit status 查看状态\ngit add . 添加文件,<path>是文件也可以是目录\ngit commit -m '注释' 提交添加的文件并备注说明\ngit remote add origin xxx  xxx是远程仓库地址，连接远程仓库\ngit push -u origin master 将本地仓库文件推送到远程仓库\n```\n\n## 三、文件操作\n\n### 1、查看\n\n```c\ngit log 查看变更日志\ngit branch 查看分支\ngit reflog 查看之前的修改操作\ngit ls-files 查看暂存区文件 \ngit log -5 --pretty=oneline 查看最近五次修改操作\n```\n\n### 2、删除\n\n```c\ngit rm 文件名.后缀 工作区和本地仓库的文件都删除\ngit remote rm origin 删除远程仓库\n```\n\n### 3、文件恢复\n\n如果已经把文件提交到本地仓库，却不小心误删了\n\n```c\ngit checkout -- 文件名.后缀 如果已经把文件提交到本地仓库，不小心误删了，可以从本地仓库把文件恢复到工作区\n```\n\n## 四、版本回退\n\n```c\ngit reset --hard HEAD^    //回退多少个版本就多少个^,或者~1,回退多少个版本数字就写多少个，或者 -hard 版本号    \n```\n\n","tags":["Github","Git"],"categories":["Github","Git"]},{"title":"使用jsDeliver+Github建图床","url":"/2022/01/24/使用jsDeliver-Github建图床/","content":"## 一、介绍\n\n### 1.什么是jsDlive\n\n> jsDelivr 是一个免费开源的 CDN 解决方案，用于帮助开发者和站长。包含 JavaScript 库、jQuery 插件、CSS 框架、字体等等 Web 上常用的静态资源。\n\n### 2.为什么使用图床\n\n> 图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。\n>\n> Github使用的是cdn加速\n\n我们写博客或网站时，会使用到图片，把图片放到本地的话，可能会出现问题，还会影响网页加载速度，使用图床能很好解决这些问题。\n<!--more-->\n\n## 二、使用Github创建仓库\n\n### 1.创建Github仓库\n\n找到Repositories,点击new，写入仓库名，注意仓库要公开的，选择Public，然后创建\n\n### 2.将图片推送到仓库\n\n在本地文件夹使用Git Bash，与创建的Github仓库连接，放入图片\n\n```c\ngit add * //*代表当前目录所有文件\ngit commit -m \"写要提交的信息\"\ngit push //推送到远程仓库\n```\n\n## 三、使用jsDelive加载图片\n\n根据格式写出来的链接相对于一个外链，直接使用即可\n\n```c\nhttps://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径\n\n//例\nhttps://cdn.jsdelivr.net/gh/FiveMoonL/mycdn/images/background2.png\n```\n\n\n","tags":["Github","jsDlive"],"categories":["Github","jsDlive"]},{"title":"IDEA的使用","url":"/2022/01/23/123/","content":"## 导入项目时出现的问题\n\n没有运行按钮，查看文件颜色不正确为橙色。\n<!--more-->\n1. 检查maven，jdk版本是否对应\n2. 选择File→Project Structure→Modules，查看是否为本地地址，如果不是，在Add Content Root中把项目叉掉，再点击+，选择项目\n3. 如果pom.xml文件为橙色，右键–>add as maven projec，下载依赖\n\n## 运行web项目\n\n在锤子图案旁边的Add Configuration，点击+，选择Tomcat的local，配置本地Tomcat地址，在Deployment中选择需要运行的项目\n\n## 快捷键\n\nShift+F10 \t运行\n\nShift+回车\t不影响当行，跳到下行\n\nAlt+Shift+↓\t快速复制当行\n\nCtrl+R\t\t\t快速替换\n\nCtrl+F\t\t\t快速查找\n\nCtrl+Alt+左右键\t回到上次光标所在","tags":["IDEA"],"categories":["IDEA"]},{"title":"使用网易云api","url":"/2021/10/28/使用网易云api/","content":"\n## 网址\n\n[网易云音乐 API](https://binaryify.github.io/NeteaseCloudMusicApi/#/)\n\n### 安装使用\n\n上面网址有说明\n先安装 他的东西，再加入他的文件夹 npm install\n再运行即可\n\n[参考](https://blog.csdn.net/lin13958756858/article/details/90906286)\n"},{"title":"axios使用","url":"/2021/10/19/axios使用/","content":"\n## axios\n\n### 直接使用\n\n一、\n安装 axios\nnpm install --save axios\n二、\n导入 axios\nimport axios from 'axios'\n三、使用\n<!--more-->\n\n\n```js\nmounted(){\nthis.$axios.get(\"网址\")\n.then(res => {\nconsole.log(res.data);\n})\n.catch(error =>{\nconsole.log(error);\n})\n}\n```\n\n### 跨域\n\n一、\n安装\n二、使用到的文件\nmain.js\nvue.config.js\napp.vue\n三、\n\n##### main.js\n```js\nimport axios from 'axios'\n\nVue.prototype.$axios = axios;\n```\n\n\n\n#### vue.config.js\n```js\nmodule.exports = {\ndevServer: {\nproxy: {\n'/te': {\n// 此处的写法，目的是为了 将 /api 替换成 https://www.baidu.com/\ntarget: 'http://apis.juhe.cn',\n// 允许跨域\nchangeOrigin: true,\nws: true,\npathRewrite: {\n'^/te': ''\n}\n}\n}\n}\n}\n\n```\n\n#### app.vue\n\n和上面一样，改前面的地址\n\n[跨域参考一](https://www.cnblogs.com/l-y-h/p/11815452.html)\n[中文文档](https://www.kancloud.cn/yunye/axios/234845)\n\n[可以直接连接的网络接口](http://www.iwenwiki.com/)\n\nq:\n拦截器，开发环境和生产环境怎么区分\n","tags":["axios"],"categories":["axios"]},{"title":"查看端口某个端口是否被占用","url":"/2021/10/15/查看端口某个端口是否被占用/","content":"\n> 启动应用时不能运行，有可能时要使用的端口被别的程序占用，但又不知道被谁占用，那我们就需要找出是什么程序并关闭\n<!-- more -->\n## 一、查找占用端口的PID\n\n打开cmd命令行窗口，输入命令：**netstat -ano**,就可以列出使用使用中的端口，可以看到以下显示，在本地地址中最后一串数字就是我们想要的端口，在这里查看是否被占用\n\n![image-端口展示](https://cdn.jsdelivr.net/gh/BinBK/myCdn/images/PID211015a.png)\n\n查看被占用端口对应的PID，输入命令：netstat -aon|findstr “数值”，输入端口可查到相关使用信息，输入PID可看到相关端口\n\n## 二、根据PID找到相关程序\n\n继续输入**tasklist|findstr** \"PID数值\"，查看是哪个进程或者程序占用了端口\n\n## 三、关闭相关程序\n\n打开任务管理器，找到相关程序并关闭\n![image-任务管理器](https://cdn.jsdelivr.net/gh/BinBK/myCdn/images/PID211015b.png)","tags":["计算机"],"categories":["计算机"]},{"title":"hexo加入图片","url":"/2021/10/14/hexo简单介绍/","content":"\n## 加入图片\n\n### 下载插件\n\n一、\nnpm install https://github.com/7ym0n/hexo-asset-image --save\n这是修改过的插件，因为版本问题用这个比较好\n二、\n配置\\_config.yml 里面的 post_asset_folder:false 这个选项设置为 true。\n<!--more-->\n三、\n\n使用\n![xxx](xxx/xxx.png)\n问题一：怎么解决让格式代码正常显示\n\n[具体网站](https://www.jianshu.com/p/3db6a61d3782)\n\n## 可参考博客\n\n[博客一](https://notes.iissnan.com/2015/something-about-next/)\n[博客二](http://51world.win/) 这个有点旧了，注意看时间\n\n## hexo 书写相关文章\n\n[网站一](https://www.jianshu.com/p/56d99a3049a5)\n","tags":["hexo"],"categories":["hexo"]},{"title":"让div水平垂直居中","url":"/2021/10/14/让div水平垂直居中/","content":"使用css让div盒子实现水平垂直居中的几种方法\n\n## 一、flex\n\n使用flex布局，在父元素上写，子元素将水平垂直居中\n\n```html\n#container{\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n}\n```\n<!--more-->\n\n\n## 二、使用定位\n\n准备\n\n```html\n<style type=\"text/css\">\n\nhtml,body{\n\theight:100%;  /*注意html不设置高度 body也就没有继承高度，就会随内容支撑高度*/\n\toverflow: hidden;  \n\tmargin:0;\n\tpadding: 0;\n}\n</style>\n\n```\n\n### 1.已知道宽高，绝对定位,margin减去div一半宽高\n\n```html\n#box{\n\tbackground: red;\n\twidth: 200px;\n\theight: 200px;\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\tmargin-left: -100px;\n\tmargin-top: -100px;\n}\n```\n\n### 2.div宽高未知，使用translate平移一半宽高\n\n```html\n#box {\n\tbackground: red;\n\twidth: 200px;\n\theight: 200px;\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%,-50%);\n}\n```\n\n### 3.定位好，margin:auto\n\n```html\n#box {\n\tbackground: red;\n\twidth: 200px;\n\theight: 200px;\n\tposition: absolute;\n\tleft: 0;\n\tright: 0;\n\ttop: 0;\n\tbottom: 0;\n\tmargin: auto;\n}\n```\n\n","tags":["css"],"categories":["css"]},{"title":"myblog","url":"/2021/10/14/myblog/","content":"测试\n![图片](yidian_116011362.jpg)\n<!--more-->\n{% asset_img yidian_116011362.jpg This is an test image %}\n\n![图片](myblog/yidian_116011362.jpg)\n\n{% asset_img myblog/yidian_116011362.jpg This is an test image %}\n\n![图片](a.jpg)\n\n![图片](myblog/a.jpg)\n"},{"title":"Github的使用","url":"/2021/10/13/Github的使用/","content":"\n## 一、使用Github搜索项目\n\n> 最简单的是直接使用搜索框搜索项目，但这样搜索出来的项目多且乱，不知道使用那一个比较好，使用Github高级搜索语法能更快让我们找到想要的项目\n<!-- more -->\n### Github高级搜索语法\n\n#### 1.stars\n\n想要找到高质量的项目，可通过筛选star数找到多人收藏的。stars:>3000，直接在搜索的项目后面加空格写入即可找到star三千以上的项目。\n\n#### 2.pushed\n\n如果想找最近有更新的项目，可使用这个。pushed：>2022-1-1,即可找到2022年一月一号也后更新的项目\n\n#### 3.desciption\n\n搜索项目的简介。in:description 博客，即可找到简介有博客这个词的项目\n\n#### 4.language\n\n搜索项目的语言\n\n## 二、本地文件上传到Github仓库\n\n> 需要先配置SSH key。cd ~/. ssh #检查本机已存在的ssh密钥，如果提示：No such file or directory 说明你是第一次使用git，则需要配置。已经安装了node.js、npm、git\n\n在Repositories中新建一个仓库，在本地新建文件夹，点击进入后，打开Git Bash或cmd命名窗口\n\n初始化本地仓库\n\n```c\ngit init\n```\n\n将文件提交到暂存区, . 是选择所有文件\n\n```c\ngit add .\ngit commit -m \"写提交文件的说明\"\ngit branch -M main 第一次创建需要写\ngit remoted aa origin xxxx 写仓库的地址，第一次提交需要写\ngit push -u origin main\t提交到远程仓库    \n```\n\n## 三、将Github项目下载到本地\n\n有两个办法，一、直接下载压缩包，二、git clone 地址，下载到本地\n","tags":["Github"],"categories":["Github"]},{"title":"Hello World","url":"/2021/10/12/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]